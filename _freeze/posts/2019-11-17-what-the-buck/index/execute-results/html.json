{
  "hash": "465d87834b6793540e9778faa211058e",
  "result": {
    "markdown": "---\ntitle: What the Buck?\nauthor: Sam Albers\ndate: '2019-11-17'\nslug: what-the-buck\ncategories:\n  - music\n  - R\ntags: []\ndescription: 'Buck talk'\nfeatured: ''\nfeaturedalt: ''\nfeaturedpath: ''\nlinktitle: ''\ntype: post\n---\n\n::: {.cell}\n\n:::\n\n\nI recently appeared on my pal [Morgan Tams'](https://www.morgantams.com/) radio program on [Cortes Island Radio](https://cortesradio.ca/). The idea is to appear weekly and talk about a single artist/band for 15 minutes. Not terribly ambitious but I thought it would be fun to explore the spotify API and generate some summaries of who we are talking about. For our first installment, Morgan and I chatted about the legendary [Buck Owens](https://en.wikipedia.org/wiki/Buck_Owens). Darn&mdash;I just lost 10 minutes of my life searching for Buck Owens gifs. Oh well. Here is a still of the man: \n\n<center><img src=\"https://upload.wikimedia.org/wikipedia/commons/1/11/Buck_Owens.jpg\" width=400px/></center>\n\n## Packages\n\nThankfully there is the R package &mdash; spotifyr &mdash; that makes requesting data from the spotify API very easy. Since spotifyr is on CRAN we can install it like usual.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages('spotifyr')\n```\n:::\n\n\nFor this post I am also using the following packages which you will need to install.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages('dplyr')\ninstall.packages('usethis')\ninstall.packages('ggplot2')\ninstall.packages('tidyr')\n```\n:::\n\nand load:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(spotifyr)\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(usethis)\nlibrary(ggplot2)\nlibrary(tidyr)\n```\n:::\n\n\n\nThere is some hocus-pocus to set up your credentials to access the spotify data which does require a paid spotify account. The spotifyr developer provides some nice instructions [here](https://github.com/charlie86/spotifyr#authentication) and the [spotify developer guide](https://developer.spotify.com/documentation/web-api/quick-start/) provides a few more details. Probably the most important thing to note here is that you want to save your spotify credentials in your `.Renviron` file. If you've never dealt with environment variables in R before, [Efficient R programming]((https://csgillespie.github.io/efficientR/set-up.html#r-startup)) provides a succinct description. In a nutshell our `.Renviron` file is a way for us to provide the value of a variable consistently across sessions and outside of a script. I always edit it with the usethis package:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedit_r_environ()\n```\n:::\n\n\nSetting up your credentials as environment variables is a one-time thing. After that, functions in the spotifyr package will just work as they all call `get_spotify_access_token()` by default. Now that I have all credential sorted out let's try and see what we can find out about Buck from the spotify API. \n\n<center><img src=\"https://media.giphy.com/media/3oFzm1Q19NznHiCJPy/giphy.gif\"/></center>\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-6_03149de94edbd6193f2109d7f2c92106'}\n\n```{.r .cell-code}\nbuck_raw <- get_artist_audio_features('buck owens')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in dplyr::left_join(., track_audio_features, by = \"album_id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 1 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n```\n:::\n\n```{.r .cell-code}\ndim(buck_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1983   39\n```\n:::\n:::\n\n\n\nThis is lots of information (39 columns just on Buck!). With these types of nested JSON data, dplyr's `glimpse` function provides a nice clean way of looking at the data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(buck_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,983\nColumns: 39\n$ artist_name                  <chr> \"Buck Owens\", \"Buck Owens\", \"Buck Owens\",…\n$ artist_id                    <chr> \"2FMZn5P3WATd7Il6FgPJNu\", \"2FMZn5P3WATd7I…\n$ album_id                     <chr> \"4Owb7bk0AddcMYLLcQHEML\", \"4Owb7bk0AddcMY…\n$ album_type                   <chr> \"album\", \"album\", \"album\", \"album\", \"albu…\n$ album_images                 <list> [<data.frame[3 x 3]>], [<data.frame[3 x …\n$ album_release_date           <chr> \"2023-01-20\", \"2023-01-20\", \"2023-01-20\",…\n$ album_release_year           <dbl> 2023, 2023, 2023, 2023, 2023, 2023, 2023,…\n$ album_release_date_precision <chr> \"day\", \"day\", \"day\", \"day\", \"day\", \"day\",…\n$ danceability                 <dbl> 0.545, 0.620, 0.489, 0.579, 0.456, 0.567,…\n$ energy                       <dbl> 0.398, 0.478, 0.293, 0.355, 0.540, 0.405,…\n$ key                          <int> 8, 9, 3, 8, 10, 4, 9, 9, 3, 2, 8, 7, 7, 6…\n$ loudness                     <dbl> -11.890, -10.100, -10.480, -11.659, -10.0…\n$ mode                         <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ speechiness                  <dbl> 0.0386, 0.0625, 0.0330, 0.0320, 0.0443, 0…\n$ acousticness                 <dbl> 0.675, 0.479, 0.579, 0.646, 0.624, 0.198,…\n$ instrumentalness             <dbl> 0.00e+00, 1.99e-04, 3.69e-05, 0.00e+00, 1…\n$ liveness                     <dbl> 0.0666, 0.0551, 0.1230, 0.2520, 0.1600, 0…\n$ valence                      <dbl> 0.718, 0.885, 0.669, 0.799, 0.662, 0.780,…\n$ tempo                        <dbl> 147.685, 165.843, 144.722, 142.691, 146.9…\n$ track_id                     <chr> \"3NFKion7rG1YWSNHD8NKAP\", \"3bjJcKXVNxXBX3…\n$ analysis_url                 <chr> \"https://api.spotify.com/v1/audio-analysi…\n$ time_signature               <int> 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4,…\n$ artists                      <list> [<data.frame[1 x 6]>], [<data.frame[1 x …\n$ available_markets            <list> <\"AR\", \"AU\", \"AT\", \"BE\", \"BO\", \"BR\", \"BG…\n$ disc_number                  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ duration_ms                  <int> 147173, 123653, 155960, 148386, 149720, 1…\n$ explicit                     <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ track_href                   <chr> \"https://api.spotify.com/v1/tracks/3NFKio…\n$ is_local                     <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ track_name                   <chr> \"Above and Beyond\", \"Tired of Livin'\", \"I…\n$ track_preview_url            <chr> \"https://p.scdn.co/mp3-preview/172f00b020…\n$ track_number                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13…\n$ type                         <chr> \"track\", \"track\", \"track\", \"track\", \"trac…\n$ track_uri                    <chr> \"spotify:track:3NFKion7rG1YWSNHD8NKAP\", \"…\n$ external_urls.spotify        <chr> \"https://open.spotify.com/track/3NFKion7r…\n$ album_name                   <chr> \"Above and Beyond\", \"Above and Beyond\", \"…\n$ key_name                     <chr> \"G#\", \"A\", \"D#\", \"G#\", \"A#\", \"E\", \"A\", \"A…\n$ mode_name                    <chr> \"major\", \"major\", \"major\", \"major\", \"majo…\n$ key_mode                     <chr> \"G# major\", \"A major\", \"D# major\", \"G# ma…\n```\n:::\n:::\n\n\nThis is too many columns for now. Let's narrow our focus to make it easier to work with. \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbuck <- buck_raw %>% \n  select(album_release_date, album_release_year, danceability:tempo, time_signature, \n         duration_ms, track_name, album_name, key_mode) \n```\n:::\n\n\n\n## Summaries of Buck\nWith this data in hand I'll make some rapid fire summaries of Buck Owens. These summaries turned out not to be particularly compelling radio material but I'm not going to let that deter me. Taking cue from the spotifyr package, what is Buck's most common key?\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbuck %>% \n    count(key_mode, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   key_mode   n\n1  G# major 326\n2   A major 308\n3  D# major 213\n4   G major 187\n5   E major 165\n6  A# major 137\n7   C major 119\n8   F major 108\n9  F# major 108\n10  D major 101\n11 C# major  94\n12  B major  81\n13  B minor   5\n14 C# minor   5\n15  F minor   5\n16  D minor   4\n17  E minor   4\n18 A# minor   3\n19 F# minor   3\n20  G minor   3\n21 G# minor   3\n22 D# minor   1\n```\n:::\n:::\n\n \nThe man loved G#/Ab major. It is a bit of unusual key and you can readily find some speculation online about why Buck might have tuned down a half step. And not much in the minor keys. I guess country finds sadness another way. How about time signature?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbuck %>% \n    count(time_signature, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  time_signature    n\n1              4 1747\n2              3  214\n3              5   18\n4              1    3\n5              0    1\n```\n:::\n:::\n\n\nA few suspect data points (zero time signature?) but overall Buck made a career of keep things pretty straight forward. Mostly 4/4 with the occasional waltz. \n\nWhat about Buck's album output. Let's plot his cumulative albums over time:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncumulative_albums <- buck %>% \n  select(album_release_year, album_name) %>% \n  distinct(.keep_all = TRUE) %>% \n  count(album_release_year) %>% \n  arrange(album_release_year) %>% \n  mutate(albums = cumsum(n))\n\nggplot(cumulative_albums, aes(x = album_release_year, y = albums)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\nOk so this data isn't particularly good. Likely what would be help is an `original_release_date` column. Buck was most active in the sixties while the data suggests his output was highest during the mid-nineties. Presumably these are re-issue dates. Still good to know &mdash; can't rely on that year data. \n\nThe [audio features](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/) available through the spotify api are very interesting numeric summaries of songs and will be fun to play around with. I won't go into descriptions of each audio feature but we will calculate histograms of all Buck's songs for each feature. Most features range between 0 and 1 so the distributions can give us a sense of Buck's music tendencies.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbuck %>% \n  select(danceability:tempo, duration_ms) %>% \n  gather() %>% \n  mutate(key = tools::toTitleCase(key)) %>% \n  ggplot() +\n  geom_histogram(aes(x = value), fill = \"blue\") +\n  facet_wrap(~key, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\nI really like looking at these distributions. Quite what they represent (or how they are derived) is something that I haven't quite wrapped my brain around. However they do offer us some high level assessment of an artist's catalogue. If the album release date info was better we could do some interesting retrospectives. In another post I'll try to find a better example. Buck's songs are reasonably dancy, don't vary much in length and are very positive. This conflicts with my prior of country music being sad and is also likely an interesting hypothesis to further test in a future post. \n\nLastly let's have a look and see if danceability is related to tempo. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncor.test(buck$danceability, buck$tempo, method = \"spearman\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tSpearman's rank correlation rho\n\ndata:  buck$danceability and buck$tempo\nS = 1529672927, p-value = 2.015e-15\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n       rho \n-0.1770145 \n```\n:::\n\n```{.r .cell-code}\nbuck %>% \n  filter(danceability != 0) %>% \n  ggplot(aes(x = tempo, y = danceability)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\nThere appears to be a very slight and negative relationship with danceability and tempo. If you are really dancing, you probably want that song to be short. We all only have so much stamina.\n\nThis has been a short usecase of using the spotify API and in particular the spotifyr package. It is actually pretty exciting to have so much music info at your fingertips. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}